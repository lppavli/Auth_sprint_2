swagger: 3.0
openapi: 3.0.0

info:
  description: Auth API
  version: "1.0.0"
  title: Auth API
tags:
  - name: 'auth_api'
    description: 'Authentication api'
  - name: 'role_crud'
    description: 'API for CRUD for role models'

paths:

  /api/v1/auth/signup:
    post:
      summary: зарегистрировать пользователя
      tags:
        - auth_api
      description: Регистрация нового пользователя
      responses:
        '201':
          description: Пользователь зарегистрирован
        '400':
          description: Логин или пароль не соответствуют требованиям
        '409':
          description: Пользователь уже существует
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Данные пользователя для регистрации

  /api/v1/auth/login:
    post:
      summary: залогинить пользователя
      tags:
        - auth_api
      description: Вход пользователя в систему
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Данные пользователя для входа
      responses:
        '200':
          description: 'successfully logged in'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwtAuthAccess=abcde.1234; jwtAuthRefresh=abcde.3452; Path=/; HttpOnly
        '401':
          description: 'auth failed'

  /api/v1/auth/logout:
    delete:
      summary: разлогинить пользователя
      tags:
        - auth_api
      description: Выход пользователя из системы
      responses:
        '200':
          description: 'successfully logged out'
        '401':
          description: 'auth failed'
      security:
        - jwtAuthAccess: [ ]
        - jwtAuthRefresh: [ ]

  /api/v1/auth/refresh:
    post:
      summary: обновить access токен
      tags:
        - auth_api
      description: Обновить токен доступа
      responses:
        '200':
          description: 'succesfully updated access token'
        '401':
          description: 'failed to updated access token'
      security:
        - jwtAuthAccess: [ ]

  /api/v1/auth/change-password:
    patch:
      summary: изменить пароль
      tags:
        - auth_api
      description: Обновить данные пароля
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: 'succesfully updated user data'
        '403':
          description: 'no permissions'
      security:
        - jwtAuthAccess: [ ]

  /api/v1/auth/history:
    get:
      summary: получить историю входов в аккаунт
      tags:
        - auth_api
      description: Предоставить историю аутентификации аккаунта
      security:
        - jwtAuthAccess: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/History'

  /api/v1/roles:
    get:
      summary: получить список всех ролей
      tags:
        - role_crud
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '403':
          description: 'no permissions'
      security:
        - jwtAuthAccess: []

  /api/v1/roles/create:
    post:
      summary: создать роль
      tags:
        - role_crud
      responses:
        '200':
          description: 'OK'
        '403':
          description: 'no permissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - jwtAuthAccess: []

  /api/v1/roles/{role_id}:
    patch:
      summary: редактировать роль
      tags:
        - role_crud
      responses:
        '200':
          description: 'OK'
        '404':
          description: 'role not found'
        '403':
          description: 'no permissions'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - jwtAuthAccess: []
    delete:
      summary: удалить роль
      tags:
        - role_crud
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'role not found'
        '403':
          description: 'no permissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - jwtAuthAccess: []

  /api/v1/users/assign-roles:
    post:
      summary: выдать пользователю роль
      tags:
        - role_crud
      responses:
        '200':
          description: 'role granted'
        '404':
          description: 'role or user not found'
        '403':
          description: 'no permissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUser'
      security:
        - jwtAuthAccess: []

  /api/v1/users/delete_role:
    delete:
      summary: отобрать у пользователя роль
      tags:
        - role_crud
      responses:
        '200':
          description: 'role refused'
        '404':
          description: 'role or user not found'
        '403':
          description: 'no permissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUser'
      security:
        - jwtAuthAccess: []

  /api/v1/users:
    get:
      summary: проверить роли у пользователя
      tags:
        - role_crud
      security:
        - jwtAuthAccess: []
  /api/v1/oauth/authorize/{provider}:
    get:
      summary: войти через соцсети
      tags:
        - oauth_api
      description: Вход пользователя в систему через соцсети
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '418':
          $ref: '#/components/responses/ImaTeapot'
        '500':
          $ref: '#/components/responses/InternalError'
      parameters:
        - name: provider
          in: path
          required: true
          description: "The provider of the OAuth service."
          schema:
            type: string

components:
  schemas:
    OauthProvider:
      type: string
      enum:
        - yandex
        - vk
    User:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: "user"
        password:
          type: string
          example: '12345'
    ChangePassword:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          example: "12345"
        new_password:
          type: string
          example: "54321"

    History:
      type: object
      required:
        - user_agent
        - ip_address
        - auth_datetime
      properties:
        user_agent:
          type: string
          example: 'Firefox'
        ip_address:
          type: string
          example: '192.186.1.1'
        auth_datetime:
          type: string
          format: datetime
          example: 'Fri, 04 Mar 2022 19:03:51 +0300'
    Role:
      type: object
      properties:
        name:
          type: string
          example: subscriber
    RoleUser:
      type: object
      required:
        - user_id
        - role_id
      properties:
        user_id:
          type: string
          format: uuid
          example: '904a0f9b-0659-4855-9019-d6c8c6325888'
        role_id:
          type: string
          format: uuid
          example: '904a0f9b-0179-4855-9019-d6c8c632576f'


  securitySchemes:
    jwtAuthAccess:
      type: apiKey
      in: cookie
      name: JWTCOOCKIEACC
    jwtAuthRefresh:
      type: apiKey
      in: cookie
      name: JWTCOOCKIEREF
